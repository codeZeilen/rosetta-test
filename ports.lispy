(begin

    (define (reverse lst)
        (define (reverse-help lst res)
            (if (null? lst) res
                (reverse-help (cdr lst) (cons (car lst) res))))
        (reverse-help lst '()))

    (define (filter pred lst)
        (define (filter-help pred lst res)
            (if (null? lst) 
                res
                (if (pred (car lst)) 
                    (filter-help pred (cdr lst)  (cons (car lst) res))
                    (filter-help pred (cdr lst)  res))))
        (reverse (filter-help pred lst '())))
                
    (define (spec spec-name spec-version spec-sources spec-contents) (
        list 
            spec-name 
            spec-version 
            spec-sources
            (filter is-placeholder? spec-contents) ; placeholder
            (filter is-capability? spec-contents) ; capabilities
            (filter is-setup? spec-contents) ; global setup
            (filter is-tearDown? spec-contents) ; global tearDown))
    ))
    
    (define (is-capability? element) (= 'capability (car element)))
    (define (is-test? element) (= 'test (car element)))
    (define (is-setup? element) (= 'setup (car element)))
    (define (is-tearDown? element) (= 'tearDown (car element)))

    (define (sources source-triples) (
        list 'sources source-triples))

    (define placeholder (lambda placeholder-specs (
        let 
            ((placeholder-spec (car placeholder-specs)) 
            (placeholder-docstring (if (> (length placeholder-specs) 1) 
                (car (cdr placeholder-specs)) 
                "")))
            (create-placeholder
                (car placeholder-spec)
                (cdr placeholder-spec)
                placeholder-docstring))))

    (define (capability name contents) (
        list 
            'capability
            name 
            (filter is-setup? contents) ; setup
            (filter is-tearDown? contents) ; tearDown
            (filter (lambda (element) (or (is-test? element) (is-capability? element))) contents) ; tests
            '() ; parent
            ))

    (define (capability-set-children-parent! capability) 
        (for-each 
            (lambda (child-capability) (begin
                (capability-set-parent! child-capability capability)
                (capability-set-children-parent! child-capability))) 
            (filter is-capability? (capability-tests capability))))


    (define (capability-setups capability) (list-ref capability 2))
    (define (capability-tearDowns capability) (list-ref capability 3))
    (define (capability-tests capability) (list-ref capability 4))
    (define (capability-parent capability) (list-ref capability 5))
    (define (capability-set-parent! capability parent-capability) 
        (list-set! capability 5 parent-capability))
        
    (define (capability-run capability) (begin ; add setup/teardown
        (capability-run-setups capability)
        (map (lambda (test) (spec-run test)) (capability-tests capability)))
        (capability-run-tearDowns capability))
    ;(map (lambda (tearDown) (tearDown)) (capability-tearDowns capability))

    (define (capability-run-setups capability) (begin
        (if (not (null? (capability-parent capability)))
            (capability-run-setups (capability-parent capability))
            '())
        (map setup-run (capability-setups capability))))

    (define (capability-run-tearDowns capability) (begin
        (map tearDown-run (capability-tearDowns capability))
        (if (not (null? (capability-parent capability)))
            (capability-run-tearDowns (capability-parent capability))
            '())))

    (define (spec-run spec) (
        if (is-test? spec) (test-run spec) (capability-run spec))) ; ensure that it is one of either

    (define (test name test-fn) (list
        'test 
        name 
        test-fn))

    (define (test-function test) (list-ref test 2))

    (define (test-run test) (test-function test))

    (define (setup setup-fn) (list
        'setup
        setup-fn))
    (define (setup-fn setup) (list-ref setup 1))
    (define (setup-run setup) ((setup-fn setup)))

    (define (tearDown tearDown-fn) (list
        'tearDown
        tearDown-fn))
    (define (tearDown-fn tearDown) (list-ref tearDown 1))
    (define (tearDown-run tearDown) ((tearDown-fn tearDown)))
)
