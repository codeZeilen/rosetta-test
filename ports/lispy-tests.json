[
    {"input": "(quote (testing 1 (2.0) -3.14e159))", "expected": ["testing", 1, [2.0], -3.14e159]},
    {"input": "(+ 2 2)", "expected": 4},
    {"input": "(+ (* 2 100) (* 1 10))", "expected": 210},
    {"input": "(if (> 6 5) (+ 1 1) (+ 2 2))", "expected": 2},
    {"input": "(if (< 6 5) (+ 1 1) (+ 2 2))", "expected": 4},
    {"input": "(cond ((< 6 5) 1) ((< 5 6) 2) (else 3) )", "expected": 2},
    {"input": "(cond ((< 6 5) 1) (#f 2) (else 3) )", "expected": 3},
    {"input": "(cond ((< 6 5) 1) (#f 2))", "expected": null},
    {"input": "(define x 3)", "expected": null},
    {"input": "x", "expected": 3}, 
    {"input": "(+ x x)", "expected": 6},
    {"input": "((lambda (x) (+ x x)) 5)", "expected": 10},
    {"input": "(define twice (lambda (x) (* 2 x)))", "expected": null}, 
    {"input": "(twice 5)", "expected": 10},
    {"input": "(define compose (lambda (f g) (lambda (x) (f (g x)))))", "expected": null},
    {"input": "((compose list twice) 5)", "expected": [10]},
    {"input": "(define repeat (lambda (f) (compose f f)))", "expected": null},
    {"input": "((repeat twice) 5)", "expected": 20}, 
    {"input": "((repeat (repeat twice)) 5)", "expected": 80},
    {"input": "(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))", "expected": null},
    {"input": "(fact 3)", "expected": 6},
    {"input": "(fact 50)", "expected": 30414093201713378043612608166064768844377641568960512000000000000},
    {"input": "(define abs (lambda (n) ((if (> n 0) + -) 0 n)))", "expected": null},
    {"input": "(list (abs -3) (abs 0) (abs 3))", "expected": [3, 0, 3]},
    {"input": "(define combine (lambda (f)\n(lambda (x y)\n(if (null? x) (quote ())\n(f (list (car x) (car y))\n((combine f) (cdr x) (cdr y)))))))", "expected": null},
    {"input": "(define zip (combine cons))", "expected": null},
    {"input": "(zip (list 1 2 3 4) (list 5 6 7 8))", "expected" : [[1, 5], [2, 6], [3, 7], [4, 8]]},
    {"input": "(define riff-shuffle (lambda (deck) (begin\n(define take (lambda (n seq) (if (<= n 0) (quote ()) (cons (car seq) (take (- n 1) (cdr seq))))))\n(define drop (lambda (n seq) (if (<= n 0) seq (drop (- n 1) (cdr seq)))))\n(define mid (lambda (seq) (/ (length seq) 2)))\n((combine append) (take (mid deck) deck) (drop (mid deck) deck)))))", "expected" : null},
    {"input": "(riff-shuffle (list 1 2 3 4 5 6 7 8))", "expected" : [1, 5, 2, 6, 3, 7, 4, 8]},
    {"input": "((repeat riff-shuffle) (list 1 2 3 4 5 6 7 8))",  "expected" : [1, 3, 5, 7, 2, 4, 6, 8]},
    {"input": "(riff-shuffle (riff-shuffle (riff-shuffle (list 1 2 3 4 5 6 7 8))))", "expected" : [1,2,3,4,5,6,7,8]}
]