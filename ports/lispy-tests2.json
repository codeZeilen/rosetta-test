[
    {"input": "()", "expected":  {"type": "SyntaxError"}},
    {"input": "(set! x)", "expected":  {"type": "SyntaxError"}},
    {"input": "(define 3 4)", "expected":  {"type": "SyntaxError"}},
    {"input": "(quote 1 2)", "expected":  {"type": "SyntaxError"}},
    {"input": "(if 1 2 3 4)", "expected":  {"type": "SyntaxError"}},
    {"input": "(lambda 3 3)", "expected":  {"type": "SyntaxError"}},
    {"input": "(lambda (x))", "expected":  {"type": "SyntaxError"}},
    {"input": "(if (= 1 2) (define-macro a 'a)\n(define-macro a 'b))", "expected": {"type": "SyntaxError"}},
    {"input": "(define (twice x) (* 2 x))", "expected": null},
    {"input": "(twice 2)", "expected": 4},
    {"input": "(twice 2 2)", "expected": {"type": "TypeError"}},
    {"input": "(define lyst (lambda items items))", "expected": null},
    {"input": "(lyst 1 2 3 (+ 2 2))", "expected": [1,2,3,4]},
    {"input": "(if 1 2)", "expected": 2},
    {"input": "(if (= 3 4) 2)", "expected": null},
    {"input": "(begin (define x 1) (set! x (+ x 1)) (+ x 1))", "expected": 3},
    {"input": "(define ((account bal) amt) (set! bal (+ bal amt)) bal)", "expected": null},
    {"input": "(define a1 (account 100))", "expected": null},
    {"input": "(a1 0)", "expected": 100},
    {"input": "(a1 10)", "expected": 110},
    {"input": "(a1 10)", "expected": 120},
    {"input": "(define (newton guess function derivative epsilon)\n(define guess2 (- guess (/ (function guess) (derivative guess))))\n(if (< (abs (- guess guess2)) epsilon) guess2\n(newton guess2 function derivative epsilon)))", "expected": null},
    {"input": "(define (square-root a)\n(newton 1 (lambda (x) (- (* x x) a)) (lambda (x) (* 2 x)) 1e-8))", "expected": null},
    {"input": "(> (square-root 200.) 14.14213)", "expected": true},
    {"input": "(< (square-root 200.) 14.14215)", "expected": true},
    {"input": "(= (inexact (square-root 200.)) (inexact (sqrt 200.)))", "expected": true},
    {"input": "(define (sum-squares-range start end)\n(define (sumsq-acc start end acc)\n(if (> start end) acc (sumsq-acc (+ start 1) end (+ (* start start) acc))))\n(sumsq-acc start end 0))", "expected": null},
    {"input": "(sum-squares-range 1 3000)", "expected": 9004500500},
    {"input": "(let ((a 1) (b 2)) (+ a b))", "expected": 3},
    {"input": "(let ((a 1) (b 2 3)) (+ a b))", "expected": {"type": "SyntaxError"}},
    {"input": "(and 1 2 3)", "expected": 3}, 
    {"input": "(and (> 2 1) 2 3)", "expected": 3}, 
    {"input": "(and)", "expected": true},
    {"input": "(and (> 2 1) (> 2 3))", "expected": false},
    {"input": "(define-macro unless (lambda args `(if (not ,(car args)) (begin ,@(cdr args))))) ; test `", "expected": null},
    {"input": "(unless (= 2 (+ 1 1)) (display 2) 3 4)", "expected": null},
    {"input": "(unless (= 4 (+ 1 1)) (display 2) (display \"\\n\") 3 4)", "expected": 4},
    {"input": "(quote x)", "expected": "x"},
    {"input": "(quote (1 2 three))", "expected": [1, 2, "three"]},
    {"input": "'x", "expected": "x"},
    {"input": "'(one 2 3)", "expected": ["one", 2, 3]},
    {"input": "(define L (list 1 2 3))", "expected": null},
    {"input": "`(testing ,@L testing)", "expected": ["testing", 1,2,3, "testing"]},
    {"input": "`(testing ,L testing)", "expected": ["testing", [1,2,3], "testing"]},
    {"input": "`,@L", "expected": {"type": "SyntaxError"}},
    {"input": "'(1 ;test comments '\n;skip this line\n2 ; more ; comments ; ) )\n3) ; final comment", "expected": [1,2,3]},
    {"input": "(call/cc (lambda (throw) (+ 5 (* 10 (throw 1))))) ;; throw", "expected": 1},
    {"input": "(call/cc (lambda (throw) (+ 5 (* 10 1)))) ;; do not throw", "expected": 15},
    {"input": "(call/cc (lambda (throw)\n(+ 5 (* 10 (call/cc (lambda (escape) (* 100 (escape 3)))))))) ; 1 level", "expected": 35},
    {"input": "(call/cc (lambda (throw) (+ 5 (* 10 (call/cc (lambda (escape) (* 100 (throw 3)))))))) ; 2 levels", "expected": 3},
    {"input": "(call/cc (lambda (throw)\n(+ 5 (* 10 (call/cc (lambda (escape) (* 100 1))))))) ; 0 levels", "expected": 1005}
]