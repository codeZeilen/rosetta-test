(suite "file-descriptor" "0.1"
	(sources 
		'("The Open Group Base Specifications Issue 7, 2018 edition" "IEEE and The Open Group" "https://pubs.opengroup.org/onlinepubs/9699919799"))

	(list 
		(placeholder '(open file-name mode) "open needs to track open file descriptors to ensure that all are closed during tear down of a test. The file descriptor should be put into character-mode.")
		(placeholder '(close file-descriptor) "close should close the file descriptor and not allow any subsequent writes")
		(placeholder '(read file-descriptor length) "read should get length items from the file descriptor")
		(placeholder '(write file-descriptor content "write should write the content at the current file descriptor position"))
		(placeholder '(flush file-descriptor) "flush should flush the current writes to the file")
		(placeholder '(is-file-descriptor? some-value) "Does the value represent a valid file descriptor")
		(placeholder '(is-file-error? some-value) "Does the value represent an error result of some kind")

		(placeholder '(create-test-file file-name file-content) "Places a test file with the specified content in a temporary location.")
		(placeholder '(remove-test-file file-name))

		(define test-file '())

		(setup
			(create-test-file "my-test-file" "first line\nsecond line"))

		(tearDown
			(remove-test-file "my-test-file"))
	
		(capability 'open (list
			(test "open returns a file descriptor" 
				(assert (is-file-descriptor? (open "my-test-file" "r"))))
				
			(test "opening with non-existant mode, results in error" 
				(assert (is-file-error? (open "my-test-file" "g")))
				(assert (is-file-error? (open "my-test-file" "rq")))
				(assert (is-file-error? (open "my-test-file" "qr"))))))

		(capability 'close (list
			(setup 
				(set! test-file (open "my-test-file" "r")))

			(tearDown
				(close test-file)
				(set! test-file '()))

			(test "a closed file descriptor does not allow further reads"
				(close test-file) 
				(assert (is-file-error? (read test-file 1))))

			(test "a closed file descriptor does not allow further writes"
				(close test-file) 
				(assert (is-file-error? (write test-file "abc"))))))

		(capability 'read (list
			(setup 
				(set! test-file (open "my-test-file" "r")))

			(tearDown
				(close test-file)
				(set! test-file '()))

			(test "read can read one value" 
				(assert-equal
					(read test-file 1)
					"f"))

			(test "read can read all of the content"
				(assert-equal
					(read test-file 23)
					"first line\nsecond line"))
			
			(test "read on a write-only file is an error" (begin
				(close test-file) ; to ensure we can open it write-only
				(let 
					((write-only-file (open "my-test-file" "w"))) 
					(assert (is-file-error? (read write-only-file 1))))))))))