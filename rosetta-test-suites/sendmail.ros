(suite 
	"sendmail" "0.1"
    ; The scope of this test suite are APIs that allow users to send email easily without having
    ; to deal with the details of a transport protocol. This includes constructing the email message itself
    ; indepdenent of whether this is done with an API from the tested library directly or by using 
    ; another library, e.g. a MIME library from the standard library.
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321")
        '("SMTP RFC 4954" "IETF" "https://tools.ietf.org/html/rfc4954"))
    
    (list 
        ; Socket
        (placeholder '(create-socket) "Create a local network socket for the server to communicate through (it should already listen for new connections)")
        (placeholder '(socket-receive socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")
        (placeholder '(socket-port socket) "Return the port of the socket")
        (placeholder '(socket-accept socket) "Accept a new connection on the socket")
        (placeholder '(socket-close socket) "Close the socket")
        (placeholder '(secure-server-socket-wrap socket ca-file cert-file key-file close-underlying-socket) "Should wrap an existing connected server socket with a secure socket (TLS/SSL) with the given configuration. Then the procedure should wait for the handshake (accept) to complete.")

        ; SMTP connection
        (placeholder '(sendmail-connect host port) "Should connect and return some representation of the connection.")
        (placeholder '(sendmail-connect-with-credentials host port user password) "Should connect and return some representation of the connection. The credentials should be used to authenticate the connection.")
        (placeholder '(sendmail-disconnect connection) "Should close the connection")
        (placeholder '(sendmail-connected? connection) "Should return true if the connection is still open")
        
        ; Send Mail
        (placeholder '(sendmail-send-message-full connection message-content from to-list cc-list bcc-list headers message-options to-list-options) "Send a message to the server. The cc-list and bcc-list are optional. The headers hash is optional. The message-options and the to-list-options are optional. The to-list-options is a list of option tuple lists, one for each receiver. The function should return a list corresponding to the responses from the server for each recipient in the to-list. If there is only a single response, a list with a single response should be returned.")
         
        (define (sendmail-send-message-with-options connection message-content from to-list message-options to-list-options) 
            (sendmail-send-message-full connection message-content from to-list '() '() (make-hash-table) message-options to-list-options))
        (define (sendmail-send-message connection content from to-list)
            (sendmail-send-message-with-options connection content from to-list  '() '()))
        (define (sendmail-send-message-with-headers connection content from to-list headers-hash-map)
            (sendmail-send-message-full connection content from to-list '() '() headers-hash-map '() '()))
        
        ; Response accessors
        (placeholder '(send-success? response) "Return whether the sending was successful.")
        (placeholder '(send-error? response) "Returns true if the sending resulted in an error of some kind. This includes error responses from the server as well as errors in the client-server communication.")

        (include "rosetta-test-suites/smtp-mock-server.scm")

        ; Compile one option to a string, either from a tuple (KEY VALUE|VALUES) to "KEY=VALUE,VALUE"
        ; or if already a string, simply return it.
        (define (compile-option-string option)
            (if (list? option)
                (string-append 
                    (first option)
                    "="
                    (if (list? (last option)) 
                        (string-join (last option) ",") 
                        (last option)))
                ; If not a list, just retrun
                option))

        ; Compile a list of option tuples to a list of strings
        (define (compile-options-strings options) 
            (map compile-option-string options))

        ; Compile a list of option strings to a single string that can be sent to the server
        (define (compile-options-string options) 
            (string-join (compile-options-strings options) " "))

        (define (server-message-contains? content)
                (string-contains? (server-message-data server) content))

        (setup (lambda ()  
            (set! server '())))

        (tearDown (lambda () 
            (stop-mock-server)))

        ;
        ; Capabilities
        ;

        (capability 'connection (list

            (define sendmail-connection '())

            (setup (lambda ()
                (set! server (start-mock-server))
                (server-set-extensions! server '("STARTTLS"))
            (server-set-auths! server '(("LOGIN" ("account" "password"))))
                (define (login-auth-proc credentials connection success failure)
                    (let 
                        ((login-user-response
                            (if (not (= credentials "")) 
                                credentials
                                (begin
                                    (socket-write connection "334 VXNlcm5hbWU6\r\n")
                                    (string-trim (socket-receive connection))))))
                        (socket-write connection "334 UGFzc3dvcmQ6\r\n")
                        (let 
                            ((login-password-response (string-trim (socket-receive connection)))) 
                            (if (and (= login-user-response "YWNjb3VudA==") (= login-password-response "cGFzc3dvcmQ="))
                                (success)
                                (failure)))))
                (server-set-auth-proc! server login-auth-proc)))

            (tearDown (lambda ()
                (sendmail-disconnect sendmail-connection)
                (set! sendmail-connection '())))

            (capability 'eager-connection (list
                (test "Connect to server" (lambda () 
                    (set! sendmail-connection (sendmail-connect "localhost" (server-port server)))
                    (assert (sendmail-connected? sendmail-connection))))

                (test "Connect with non-numeric port is an error" (lambda ()
                    (assert (send-error? (sendmail-connect "localhost" "not-a-port")))
                    (sendmail-connect "localhost" (server-port server)))) ; Give the mock server a chance to terminate

                (test "Connect with valid credentials" (lambda ()
                    (set! sendmail-connection (sendmail-connect-with-credentials "localhost" (server-port server) "account" "password"))
                    (assert (sendmail-connected? sendmail-connection))))

                (test "Connect with invalid credentials" (lambda ()
                    (set! sendmail-connection (sendmail-connect-with-credentials "localhost" (server-port server) "account" "wrong-password"))
                    (assert (not (sendmail-connected? sendmail-connection)))))
            ))

            (capability 'lazy-connection (list

                (define (some-send connection)
                    (sendmail-send-message connection "message content" "sender@sender.to" '("user@recipient.to")))

                (test "Connect with valid credentials" (lambda ()
                    (set! sendmail-connection (sendmail-connect-with-credentials "localhost" (server-port server) "account" "password"))
                    (assert (all? send-success? (some-send sendmail-connection)))))

                (test "Connect with invalid credentials" (lambda ()
                    (set! sendmail-connection (sendmail-connect-with-credentials "localhost" (server-port server) "account" "wrong-password"))
                    (assert (all? send-error? (some-send sendmail-connection)))))
            ))            

        ))

        ; This covers full scenarios for sending a message that may be covered by convenience functions or
        ; require bridge implementors to use the commands directly
        (capability 'send-message (list

            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (sendmail-connect "localhost" (server-port server))))

            (setup (lambda () 
                (set! server (start-mock-server))
                (connect-smtp-server)))

            (tearDown (lambda ()
                (sendmail-disconnect smtp-connection)
                (set! smtp-connection '())))

            (test "Send a message" (lambda () 
                (let
                    ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                    (assert (all? send-success? responses)))))

            (test "Send a message to multiple recipients" (lambda () 
                (let
                    ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user1@recipient.to" "user2@recipient.to"))))
                    (assert (all? send-success? responses)))))

            (test "Send a message with empty recipient" (lambda () 
                (let
                    ((responses (sendmail-send-message smtp-connection "message content" "<>" '("user@recipient.to"))))
                    (assert (all? send-success? responses) "Client should be able to send message with empty recipient")
                    (assert
                        (any?
                            (lambda (request) 
                                (string-prefix? "FROM:<>" (first (request-arguments request))))
                            (server-requests-with-command server "MAIL"))
                        (string-append "Expected client to send empty sender: " (server-requests-with-command server "MAIL"))))))

            ; TODO: CC and BCC

            ; TODO
            ;(test "Send message with a valid and an invalid recipient" (lambda () 
            ;    (let
            ;       ((response (sendmail-send-message smtp-connection "message content" ""))))))

            (data-test "Failures during send message" 
                '(("400 BUSY")
                ("502 SYNTAX ERROR")
                ("530 AUTH ERROR")
                ("520 FATAL ERROR"))
                (lambda (response-code) (begin 
                    (server-set-response-code! server response-code)
                    (let
                        ((responses 
                            (sendmail-send-message smtp-connection "failure content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses) (string-append "Expected client to fail when server responds with error:" response-code))))))

            (capability 'handle-421 (list
                ; As send-message handles multiple commands and responses, it also needs to deal with responses that
                ; indicate that the connection has been terminated.
                (test "Handle 421 during mail command" (lambda ()
                    (server-set-command-response-code! server "MAIL" "421 Service not available")
                    (let
                        ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses))
                        (assert (not (sendmail-connected? smtp-connection)) "421 should have lead to client terminating connection."))))

                (test "Handle 421 during rcpt command" (lambda ()
                    (server-set-command-response-code! server "RCPT" "421 Service not available")
                    (let
                        ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses))
                        (assert (not (sendmail-connected? smtp-connection)) "421 should have lead to client terminating connection."))))

                (test "Handle 421 at start of data command" (lambda ()
                    (server-set-command-response-code! server "DATA" "421 Service not available")
                    (let
                        ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses))
                        (assert (not (sendmail-connected? smtp-connection)) "421 should have lead to client terminating connection."))))

                (test "Handle 421 during data command" (lambda ()
                    (server-set-command-response-code! server "DATA MIDDLE" "421 Service not available")
                    (let
                        ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses))
                        (assert (not (sendmail-connected? smtp-connection)) "421 should have lead to client terminating connection."))))

                (test "Handle 421 at the end of data command" (lambda ()
                    (server-set-command-response-code! server "DATA END" "421 Service not available")
                    (let
                        ((responses (sendmail-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                        (assert (all? send-error? responses))
                        (assert (not (sendmail-connected? smtp-connection)) "421 should have lead to client terminating connection."))))

            ))

        ))

        (capability 'headers (list

            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (sendmail-connect "localhost" (server-port server))))

            (setup (lambda () 
                (set! server (start-mock-server))
                (connect-smtp-server)))

            (tearDown (lambda ()
                (sendmail-disconnect smtp-connection)
                (set! smtp-connection '())))

            (test "set basic header" (lambda ()
                (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table '(("x-my-header" "some value"))))
                (assert (server-message-contains? "x-my-header: some value") (string-append "Expected x-my-header to be present, but instead got " (server-message-data server)))))

            (test "set header with unicode value" (lambda ()
                (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table '(("x-my-header" "¡some value"))))
                (assert 
                    (or
                        (server-message-contains? "x-my-header: =?utf-8?q?=C2=A1some?= value")
                        (server-message-contains? "x-my-header: =?utf-8?b?wqFzb21lIHZhbHVl?=")
                        (server-message-contains? "x-my-header: =?UTF-8?Q?=C2=A1some?= value")
                        (server-message-contains? "x-my-header: =?UTF-8?B?wqFzb21lIHZhbHVl?="))
                    (string-append "Expected x-my-header to contain encoded ¡, but instead got " (server-message-data server)))
                (assert
                    (server-message-contains? "message content")
                    (string-append "Expected message content to be unaltered by unicode header value, but instead got" (server-message-data server)))))

            (test "set override standard header" (lambda ()
                (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table '(("To" "another-user@recipient.to"))))
                (assert (server-message-contains? "To: another-user@recipient.to") (string-append "Expected To header field to include another-user..., but instead got " (server-message-data server)))))

            (capability 'crlf-injection (list

                (capability 'detection (list
                    
                    (data-test "CRLF detection in basic header value" 
                        '(("1some\rvalue") ("2some\nvalue") ("3some\r\nvalue"))
                        (lambda (header-value)
                            (let 
                                ((responses (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table (list (list "x-my-header" header-value))))))
                                (assert (all? send-error? responses) (string-append "The header value: " header-value " should have resulted in error but did not:" responses)))))

                    (data-test "CRLF detection in unicode header value" 
                        '(("1¡some\rvalue") ("2¡some\nvalue") ("3¡some\r\nvalue"))
                        (lambda (header-value)
                            (let 
                                ((responses (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table (list (list "x-my-header" header-value))))))
                                (assert (all? send-error? responses) (string-append "The header value: " header-value " should have resulted in error but did not:" responses)))))

                ))

                (capability 'mitigation (list

                    (data-test "CRLF mitigation in basic header value" 
                        '(("1some\rvalue") ("2some\nvalue") ("3some\r\nvalue"))
                        (lambda (header-value)
                            (let 
                                ((responses (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table (list (list "x-my-header" header-value))))))
                                (assert (all? send-success? responses) (string-append "Message was not sent successfully, instead got: " responses))
                                (assert (not (server-message-contains? header-value)) (string-append "The header value: " header-value " should have been stripped of CRLF but did not:" (server-message-data server))))))

                    (data-test "CRLF mitigation in unicode header value" 
                        '(("1¡some \rvalue" "\rvalue") ("2¡some \nvalue" "\nvalue") ("3¡some \r\nvalue" "\r\nvalue"))
                        (lambda (header-value fragment)
                            (let 
                                ((responses (sendmail-send-message-with-headers smtp-connection "message content" "sender@sender.to" '("user@recipient.to") (alist->hash-table (list (list "x-my-header" header-value))))))
                                (assert (all? send-success? responses) (string-append "Message was not sent successfully, instead got: " responses))
                                (assert (not (server-message-contains? fragment)) (string-append "The header value: " header-value " should have been stripped of CRLF but did not: " (server-message-data server))))))

                ))
            ))

        ))

        (capability 'general-crlf-injection (list

            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (sendmail-connect "localhost" (server-port server))))

            (setup (lambda () 
                (set! server (start-mock-server))
                (connect-smtp-server)))

            (tearDown (lambda ()
                (sendmail-disconnect smtp-connection)
                (set! smtp-connection '())))

            (define (assert-crlf-injection-error test-function failure-description)
                (let
                    ((response (test-function)))
                    (assert (send-error? response) failure-description)))

            (define (assert-crlf-injection-mitigation test-function injection command failure-description)
                (let
                    ((response (test-function)))
                    (assert (send-success? response))
                    (assert 
                        (all? 
                            (lambda (c) (not (string-index c injection))) 
                            (server-requests-with-command server command))
                        failure-description)))

            (capability 'detection (list

                (data-test "CRLF detection in send-message sender"
                    '(("foo\r\nbar@email.com") ("foo\nbar@email.com") ("foo\rbar@email.com")) 
                    (lambda (sender-string) (begin 
                        (let
                            ((responses (sendmail-send-message smtp-connection "message content" sender-string '("user@recipient.to"))))
                            (display responses)
                            (assert (all? send-error? responses) (string-append "Expected client to fail when CR or LF is in sender of send-message: " sender-string))))))
                        
                (data-test "CRLF detection in send-message recipient"
                    '(("foo\r\nbar@email.com") ("foo\nbar@email.com") ("foo\rbar@email.com")) 
                    (lambda (recipient-string) (begin 
                        (let
                            ((responses (sendmail-send-message smtp-connection "message content" "sender@email.com" (list recipient-string))))
                            (assert (all? send-error? responses) (string-append "Expected client to fail when CR or LF is in recipient of send-message: " recipient-string))))))
        
            ))

            (capability 'mitigation (list

                (data-test "CRLF mitigation in send-message sender"
                    '(("foo\r\nbar@email.com" "\r\n") ("foo\nbar@email.com" "\n") ("foo\rbar@email.com" "\r")) 
                    (lambda (sender-string injection) (begin 
                        (let
                            ((responses (sendmail-send-message smtp-connection "message content" sender-string '("user@recipient.to"))))
                            (assert (all? send-success? responses))
                            (assert 
                                (all? 
                                    (lambda (c) (not (string-index c injection))) 
                                    (server-requests-with-command server "MAIL"))
                                (string-append "Expected client to remove CR or LF or both from sender of send-message: " sender-string))))))
                        
                (data-test "CRLF mitigation in send-message recipient"
                    '(("foo\r\nbar@email.com" "\r\n") ("foo\nbar@email.com" "\n") ("foo\rbar@email.com" "\r")) 
                    (lambda (recipient-string injection) (begin 
                        (let
                            ((responses (sendmail-send-message smtp-connection "message content" "sender@email.com" (list recipient-string))))
                            (assert (all? send-success? responses))
                            (assert 
                                (all? 
                                    (lambda (c) (not (string-index c injection))) 
                                    (server-requests-with-command server "RCPT"))
                                (string-append "Expected client to remove CR or LF or both from recipients of send-message: " recipient-string))))))
            ))
                    
        ))

        (capability 'unicode-messages (list
        
            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (sendmail-connect "localhost" (server-port server))))

            (setup (lambda () 
                (set! server (start-mock-server))
                (connect-smtp-server)))

            (tearDown (lambda ()
                (sendmail-disconnect smtp-connection)
                (set! smtp-connection '())))

            (capability '8bitmime (list

                (define (activate-8bitmime server) 
                    (server-set-extensions! server '("8BITMIME")))
        
                ; The library can handle unicode messages by using the 8BITMIME extension but users have to set the option explicitly.
                (capability 'mandatory-options (list

                    ; 6152 - Section 3, end of section 
                    (test "non-ascii content in send-message with 8BITMIME option and without 8BITMIME server support" (lambda ()
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "¡a test message containing unicode!" "sender@sender.com" '("user@recipient.com") '("BODY=8BITMIME") '())))
                            (assert (all? send-error? send-message-responses) "Client should not support sending 8BITMIME body when server does not support it"))))

                    ; Use fallback encoding when 8BITMIME options was not set (independent of server support) and should not just go ahead with unicode anyway
                    (test "non-ascii content in send-message without 8BITMIME option" (lambda ()
                        (activate-8bitmime server)
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "¡a test message containing unicode!" "sender@sender.com" '("user@recipient.com") '() '())))
                            (assert (all? send-success? send-message-responses))    
                            (assert 
                                (not (server-message-contains? "¡a test message containing unicode!")))
                                (string-append 
                                    "Expected server to receive message with unicode content encoded, but received: " (server-message-data server)))))

                    (test "non-ascii content in send-message with 8BITMIME option and server support" (lambda ()
                        (activate-8bitmime server)
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "¡a test message containing unicode!" "sender@sender.com" '("user@recipient.com") '("BODY=8BITMIME") '())))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<sender@sender.com> BODY=8BITMIME")
                            (assert 
                                (server-message-contains? "¡a test message containing unicode!")
                                (string-append 
                                    "Expected server to receive message with unicode content directly, but received: " (server-message-data server))))))
                
                ))

                ; The library can handle unicode messages by using the 8BITMIME extension and detects it automatically.
                (capability 'automatic-detection (list

                    (test "non-ascii content in send-message without 8BITMIME support" (lambda ()
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "¡a test message containing unicode!" "sender@sender.com" '("user@recipient.com") '() '())))
                            (assert-any-request server "MAIL FROM:<sender@sender.com>")
                            (assert 
                                (not (server-message-contains? "¡a test message containing unicode!"))
                                (string-append 
                                    "Expected server to receive message with unicode content directly, but received: " (server-message-data server))))))

                    (test "non-ascii content in send-message with 8BITMIME support" (lambda ()
                        (activate-8bitmime server)
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "¡a test message containing unicode!" "sender@sender.com" '("user@recipient.com") '() '())))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<sender@sender.com> BODY=8BITMIME")
                            (assert 
                                (server-message-contains? "¡a test message containing unicode!")
                                (string-append 
                                    "Expected server to receive message with unicode content directly, but received: " (server-message-data server))))))
                
                ))
            ))
        ))

        (capability 'internationalized-email-addresses (list
        
            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (sendmail-connect "localhost" (server-port server))))

            (setup (lambda () 
                (set! server (start-mock-server))
                (connect-smtp-server)))

            (tearDown (lambda () 
                (sendmail-disconnect smtp-connection)
                (set! smtp-connection '())))


            (capability 'smtputf8 (list

                ; RFC 6531 3.1 - Item 8 
                ; 8BITMIME is required, as we would normally expect international mailboxes to also
                ; appear in the message headers, thus the DATA content
                (define (activate-smtputf8 server) 
                    (server-set-extensions! server '("SMTPUTF8" "8BITMIME")))

                (capability 'explicit-options (list

                    ; Recipient

                    (test "international recipient mailbox in send-message without SMTPUTF8 support" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ") '("SMTPUTF8") '())))
                            (assert (all? send-error? send-message-responses)))))

                    (test "international recipient mailbox in send-message without SMTPUTF8 support and no option" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ") '() '())))
                            (assert (all? send-error? send-message-responses)))))

                    (test "international recipient mailbox in send-message with SMTPUTF8 support" (lambda ()
                        (activate-smtputf8 server)
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ") '("SMTPUTF8") '())))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<sender@sender.com> SMTPUTF8 BODY=8BITMIME"))))

                    (test "international recipient mailbox in send-message with SMTPUTF8 support but no option" (lambda ()
                        (activate-smtputf8 server)
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ") '() '())))
                            (assert (all? send-error? send-message-responses)))))

                    ; Sender

                    (test "international sender mailbox in send-message without SMTPUTF8 support" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com") '("SMTPUTF8") '())))
                            (assert (all? send-error? send-message-responses)))))

                    (test "international sender mailbox in send-message without SMTPUTF8 support and no option" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com") '() '())))
                            (assert (all? send-error? send-message-responses)))))

                    (test "international sender mailbox in send-message with SMTPUTF8 support" (lambda ()
                        (activate-smtputf8 server)
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com") '("SMTPUTF8") '())))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<χρήστης@παράδειγμα.ελ> SMTPUTF8 BODY=8BITMIME"))))

                    (test "international sender mailbox in send-message with SMTPUTF8 support but no option" (lambda ()
                        (activate-smtputf8 server)
                        
                        (let
                            ((send-message-responses (sendmail-send-message-with-options 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com") '() '())))
                            (assert (all? send-error? send-message-responses)))))
                ))

                (capability 'automatic-detection (list

                    ; Recipient

                    (test "international recipient mailbox in send-message without SMTPUTF8 support" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ"))))
                            (assert (all? send-error? send-message-responses)))))  

                    (test "international recipient mailbox in send-message with SMTPUTF8 support" (lambda ()
                        (activate-smtputf8 server)
                    
                        (let
                            ((send-message-responses (sendmail-send-message 
                                smtp-connection "message content" "sender@sender.com" '("χρήστης@παράδειγμα.ελ"))))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<sender@sender.com> SMTPUTF8 BODY=8BITMIME"))))

                    ; Sender

                    (test "international sender mailbox in send-message without SMTPUTF8 support" (lambda ()
                        
                        (let
                            ((send-message-responses (sendmail-send-message 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com"))))
                            (assert (all? send-error? send-message-responses)))))

                    (test "international sender mailbox in send-message with SMTPUTF8 support" (lambda ()
                        (activate-smtputf8 server)
                        
                        (let
                            ((send-message-responses (sendmail-send-message 
                                smtp-connection "message content" "χρήστης@παράδειγμα.ελ" '("recipient@server.com"))))
                            (assert (all? send-success? send-message-responses))
                            (assert-any-request server "MAIL FROM:<χρήστης@παράδειγμα.ελ> SMTPUTF8 BODY=8BITMIME"))))
                ))
            ))
        ))

    )
)