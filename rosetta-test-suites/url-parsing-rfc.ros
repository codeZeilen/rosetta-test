(suite 
	"URI Parsing" "0.1"
    (sources 
        '("Python Package RFC3986 tests" "python-hyper" "https://github.com/python-hyper/rfc3986")
        '("CPython urlparse tests" "Python Foundation" "https://github.com/python/cpython/blob/main/Lib/test/test_urlparse.py")
        '("RFC 3986: Uniform Resource Identifier (URI): Generic Syntax" "IETF" "https://www.rfc-editor.org/rfc/rfc3986#section-3.2.2"))
    
    (list 
        (placeholder '(url-parse string) "Return a structured representation of the URL or a representation of any occurred error.")
        (placeholder '(parse-error? parse-result) "Does the parse-result represent a parse error?")
        (placeholder '(url-scheme parse-result) "Return the scheme part of the parsed URL. Return the empty string if no value is present.")
        (placeholder '(url-authority parse-result) "Return the authority part of the parsed URL. Return the empty string if no value is present.")
        (placeholder '(url-path parse-result) "Return the path part of the parsed URL. Return the empty string if no value is present.")

        (define (assert-parse-error url-string)
            (let 
                ((parse-result (url-parse url-string)))
                (assert (parse-error? parse-result) (string-append "Expected parse error for: " url-string " but got: " parse-result))))

        ; RFC 3986 - 3.1. Scheme
        (capability 'scheme (list

            (define (assert-scheme scheme-string url-string)
                (assert 
                    (not (parse-error? (url-parse url-string))) 
                    (string-append "Failed to parse URL: " url-string))
                (assert-equal 
                    (string-downcase scheme-string) 
                    (string-downcase (url-scheme (url-parse url-string)))))

            (test "basic scheme"
                (assert-scheme "http" "http://domain.tld"))

            (test "short scheme"
                (assert-scheme "a" "a:path"))

            (test "scheme with digits"
                (assert-scheme "a1" "a1:path")
                (assert-scheme "a00" "a00:path"))

            (test "scheme with special characters"
                (assert-scheme "a+1" "a+1:path")
                (assert-scheme "a-1" "a-1:path")
                (assert-scheme "a.1" "a.1:path")
                (assert-scheme "a+" "a+:path"))

            (test "scheme is case insensitive"
                (assert-scheme "http" "HTTP://domain.tld"))

            (capability 'invalid (list
            
                (test "scheme starting with digits"
                    (assert-parse-error "1:path")
                    (assert-parse-error "0a:path"))

                (test "scheme starting with special characters"
                    (assert-parse-error "+:path")
                    (assert-parse-error "-a:path")
                    (assert-parse-error ".a:path"))
                
                (test "scheme with invalid characters"
                    (assert-parse-error "ab@c:path")
                    (assert-parse-error "ab&c:path")
                    (assert-parse-error "ab√§:path")
                    (assert-parse-error "ab#c:path")
                    (assert-parse-error "ab[]c:path")
                    (assert-parse-error "ab?c:path")
                    (assert-parse-error "ab/c:path"))

                (test "non-terminated scheme"
                    (assert-parse-error "a//domain.tld"))
                    
            ))

        ))

        ; The authority component is preceded by a double slash ("//") and is
        ; terminated by the next slash ("/"), question mark ("?"), or number
        ; sign ("#") character, or by the end of the URI.
        ; RFC 3986 - 3.2. Authority
        (capability 'authority (list

            (define (assert-authority authority-string url-string)
                (assert 
                    (not (parse-error? (url-parse url-string))) 
                    (string-append "Failed to parse URL: " url-string))
                (assert-equal 
                    (string-downcase authority-string) 
                    (string-downcase (url-authority (url-parse url-string)))))

            (test "basic authority"
                (assert-authority "named-authority" "scheme://named-authority/path")
                (assert-authority "named-authority" "scheme://named-authority?query")
                (assert-authority "named-authority" "scheme://named-authority#fragment")
                (assert-authority "named-authority" "scheme://named-authority"))

            (test "basic not-a-authority"
                (assert-authority "" "mailto:test@recipient.org")
                (assert-authority "" "some-prot:/path:100"))

            ; Host parts
            ; RFC 3986 - 3.2.2. Host
            ; The host subcomponent of authority is identified by an IP literal
            ; encapsulated within square brackets, an IPv4 address in dotted-
            ; decimal form, or a registered name.
            (test "ipv4 host"
                (assert-authority "0.0.0.0" "schema://0.0.0.0")
                (assert-authority "11.11.11.11" "schema://11.11.11.11")
                (assert-authority "210.210.210.210" "schema://210.210.210.210")
                (assert-authority "255.255.255.255" "schema://255.255.255.255")
                (assert-authority "0.11.210.255" "schema://0.11.210.255"))

            (test "reg-name host"
                (assert-authority "domain.tld" "schema://domain.tld"))

            (test "empty reg-name host"
                (assert-authority "" "schema:///path"))

            (test "reg-name host with all special characters"
                (assert-authority "ab-._~!$&'()*+,;=" "schema://ab-._~!$&'()*+,;="))

            (test "reg-name host with digits"
                (assert-authority "a1" "schema://a1")
                (assert-authority "a00" "schema://a00")
                (assert-authority "00a99" "schema://00a99"))
            
            (test "reg-name host with schema name"
                (assert-authority "http-bin.org" "schema://http-bin.org"))

            (test "reg-name host with percent-encoded name"
                (assert-authority "%2F%20bin.org" "schema://%2F%20bin.org")
                (assert-authority "bin.org%20%2F" "schema://bin.org%20%2F"))

            (test "ipv6 host"
                (assert-authority "[21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A]" "schema://[21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A]")
                (assert-authority "[::1]" "schema://[::1]")
                (assert-authority "[21DA:D3:0:2F3B:2AA:FF:FE28:9C5A]" "schema://[21DA:D3:0:2F3B:2AA:FF:FE28:9C5A]")
                (assert-authority "[FE80::2AA:FF:FE9A:4CA2]" "schema://[FE80::2AA:FF:FE9A:4CA2]")
                (assert-authority "[FF02::2]" "schema://[FF02::2]")
                (assert-authority "[FFFF::]" "schema://[FFFF::]")
                (assert-authority "[FF02:3::5]" "schema://[FF02:3::5]")
                (assert-authority "[FF02:0:0:0:0:0:0:2]" "schema://[FF02:0:0:0:0:0:0:2]")
                (assert-authority "[FF02:30:0:0:0:0:0:5]" "schema://[FF02:30:0:0:0:0:0:5]"))

            ; Userinfo
            ; The userinfo subcomponent may consist of a user name and, optionally,
            ; scheme-specific information about how to gain authorization to access
            ; the resource.  The user information, if present, is followed by a
            ; commercial at-sign ("@") that delimits it from the host.

            (test "basic userinfo"
                (assert-authority "user@domain.tld" "schema://user@domain.tld")
                (assert-authority "2user:pwd2@domain.tld" "schema://2user:pwd2@domain.tld"))

            (test "empty userinfo"
                (assert (or
                    (= "@domain.tld" (url-authority (url-parse "schema://@domain.tld")))
                    (= "domain.tld" (url-authority (url-parse "schema://@domain.tld")))))
                (assert (or
                    (= ":@domain.tld" (url-authority (url-parse "schema://:@domain.tld")))
                    (= "domain.tld" (url-authority (url-parse "schema://:@domain.tld"))))))

            (test "multiple parts userinfo"
                (assert-authority "a:b:c::@domain.tld" "schema://a:b:c::@domain.tld"))

            (test "userinfo with all special characters"
                (assert-authority "-._~!:$&'()*+,;=@domain.tld" "schema://-._~!:$&'()*+,;=@domain.tld"))

            (test "percent-encoded userinfo"
                (assert-authority "a%20dmin%40@domain.tld" "schema://a%20dmin%40@domain.tld"))

            ; Port
            ; The port subcomponent of authority is designated by an optional port
            ; number in decimal following the host and delimited from it by a
            ; single colon (":") character.
            (test "authority with a port"
                (assert-authority "domain.tld:80" "schema://domain.tld:80")
                (assert-authority "1.1.1.1:8080" "schema://1.1.1.1:8080")
                (assert-authority "[::1]:65535" "schema://[::1]:65535"))

            (test "long port"
                (assert-authority "domain.tld:65535" "schema://domain.tld:65535"))

            (test "empty port"
                (assert (or
                    (= "domain.tld" (url-authority (url-parse "schema://domain.tld:")))
                    (= "domain.tld:" (url-authority (url-parse "schema://domain.tld:"))))))


            (capability 'invalid (list
            
                (test "invalid ipv4 host"
                    (assert-parse-error "schema://1.1")
                    (assert-parse-error "schema://1.1.1")
                    (assert-parse-error "schema://1.1.1.1.1")
                    (assert-parse-error "schema://1..1.1")
                    (assert-parse-error "schema://1.1.1.")
                    (assert-parse-error "schema://.1.1.1")
                    (assert-parse-error "schema://256.256.256.256"))

                (test "invalid ipv6 host - missing brackets"
                    (assert-parse-error "schema://::1")
                    (assert-parse-error "schema://[::1")
                    (assert-parse-error "schema://::1]"))

                (test "invalid ipv6 host - too many double colons"
                    (assert-parse-error "schema://[FF02::3::5]"))

                (test "invalid ipv6 host - improperly compacted"
                    (assert-parse-error "schema://[FADF:01]"))

                (test "invalid ipv6 host - invalid mixture of hosts"
                    (assert-parse-error "scheme://prefix.[v6a.ip]")
                    (assert-parse-error "scheme://[v6a.ip].suffix")
                    (assert-parse-error "scheme://prefix.[v6a.ip]/")
                    (assert-parse-error "scheme://[v6a.ip].suffix/")
                    (assert-parse-error "scheme://prefix.[v6a.ip]?")
                    (assert-parse-error "scheme://[v6a.ip].suffix?")
                    (assert-parse-error "scheme://prefix.[::1]")
                    (assert-parse-error "scheme://[::1].suffix")
                    (assert-parse-error "scheme://prefix.[::1]/")
                    (assert-parse-error "scheme://[::1].suffix/")
                    (assert-parse-error "scheme://prefix.[::1]?")
                    (assert-parse-error "scheme://[::1].suffix?")
                    (assert-parse-error "scheme://prefix.[::1]:a")
                    (assert-parse-error "scheme://[::1].suffix:a")
                    (assert-parse-error "scheme://prefix.[::1]:a1")
                    (assert-parse-error "scheme://[::1].suffix:a1")
                    (assert-parse-error "scheme://prefix.[::1]:1a")
                    (assert-parse-error "scheme://[::1].suffix:1a")
                    (assert-parse-error "scheme://prefix.[::1]:")
                    (assert-parse-error "scheme://[::1].suffix:/")
                    (assert-parse-error "scheme://prefix.[::1]:?")
                    (assert-parse-error "scheme://user@prefix.[v6a.ip]")
                    (assert-parse-error "scheme://user@[v6a.ip].suffix"))

                ; TODO: Invalid userinfo
            
                (test "invalid port - too many ports"
                    (assert-parse-error "schema://domain.tld:80:80")
                    (assert-parse-error "schema://domain.tld:80:80:80"))

            ))

        ))

        ; The path is terminated by the first question mark ("?") or 
        ; number sign ("#") character, or by the end of the URI. If a 
        ; URI contains an authority component, then the path component
        ; must either be empty or begin with a slash ("/") character.
        ; RFC 3986 - 3.3. Path
        (capability 'path (list

            (define (assert-path path-string url-string)
                (assert 
                    (not (parse-error? (url-parse url-string))) 
                    (string-append "Failed to parse URL: " url-string))
                (assert-equal 
                    (string-downcase path-string) 
                    (string-downcase (url-path (url-parse url-string)))))
        

            (test "basic path with authority"
                (assert-path "/path" "schema://domain.tld/path")
                (assert-path "/path" "schema://domain.tld/path?query")
                (assert-path "/path" "schema://domain.tld/path?query#fragment")
                (assert-path "/path" "schema://domain.tld/path#fragment"))

            ; If a URI does not contain an authority component, then the 
            ; path cannot begin with two slash characters ("//").
            ; RFC 3986 - 3.3. Path

            (test "basic path without authority"
                (assert-path "path" "schema:path")
                (assert-path "path/path2" "schema:path/path2")
                (assert-path "path" "schema:path?query")
                (assert-path "path" "schema:path?query#fragment")
                (assert-path "path" "schema:path#fragment")
                (assert-path "/path" "schema:/path")
                (assert-path "/path" "schema:/path?query")
                (assert-path "/path" "schema:/path?query#fragment")
                (assert-path "/path" "schema:/path#fragment")
                (assert-path "/path2" "schema://path/path2"))

            (test "empty path with authority"
                (assert-path "" "schema://domain.tld")
                (assert-path "" "schema://domain.tld#fragment")
                (assert-path "/" "schema://domain.tld/"))

            (test "empty path without authority"
                (assert-path "" "schema:")
                (assert-path "/" "schema:/")
                (assert-path "" "schema:#fragment")
                (assert-path "" "schema:?query#fragment"))

            (test "hierarchical path with authority"
                (assert-path "/path/to/resource" "schema://domain.tld/path/to/resource")
                (assert-path "/path/to/resource" "schema://domain.tld/path/to/resource?query")
                (assert-path "/path/to/resource" "schema://domain.tld/path/to/resource?query#fragment")
                (assert-path "/path/to/resource" "schema://domain.tld/path/to/resource#fragment"))

            (test "path with digits and all special characters"
                (assert-path "/012345789-._~!$&'()*+,;=:@/path2" "schema://domain.tld/012345789-._~!$&'()*+,;=:@/path2"))

            (test "path with percent-encoded characters"
                (assert-path "/%2fpath/t%20o/resource" "schema://domain.tld/%2fpath/t%20o/resource"))

            ; TODO: URI references
            ; In addition, a URI reference (Section 4.1) may be a relative-path 
            ; reference, in which case the first path segment cannot contain a 
            ; colon (":") character. 

        ))


))