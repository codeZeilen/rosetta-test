(spec 
	"SMTP" "0.1"
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321"))
    
    (list 

        (placeholder '(create-socket) "Create a local network socket for the server to communicate through")
        (placeholder '(socket-read socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")

        (placeholder '(smtp-connect host port) "Should connect and return some representation of the connection")

        (define server '())
        (define (server-port server) (list-ref server 1))
        (define (start-mock-server) ; should return the port number
            (let 
                ((socket (create-socket)))
                (list (thread (lambda () (mock-smtp-server socket))) socket)))

        (define (mock-smtp-server)
            (begin
                (define (ehlo answer) (socket-write socket (string-append "220 " answer))) ; not correct yet
                (define (loop) (let 
                    ((data (socket-read socket)))
                    (cond 
                        ((empty-or-null? data) (loop))
                        ((= data "EHLO") (ehlo (list-ref (string-split data) 1)))
                        (else (loop)))))))
            
        (capability 'connection 
            (list
                (setup (lambda () (begin 
                    (set! server (start-mock-server)))))

                (tearDown (lambda () (begin 
                    (stop-mock-server))))

                (test "Connect to server" (lambda () (begin 
                    (smtp-connect "localhost" (server-port server)))))))   
    )
)