(spec 
	"SMTP" "0.1"
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321"))
    
    (list 

        (placeholder '(create-socket) "Create a local network socket for the server to communicate through (it should already listen for new connections)")
        (placeholder '(socket-receive socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")
        (placeholder '(socket-port socket) "Return the port of the socket")
        (placeholder '(socket-accept socket) "Accept a new connection on the socket")
        (placeholder '(socket-close socket) "Close the socket")

        (placeholder '(smtp-connect host port) "Should connect and return some representation of the connection")
        (placeholder '(smtp-ehlo content connection) "Send an EHLO command to the server")
        (placeholder '(smtp-response-code response) "Return the response code from the server")
        (placeholder '(smtp-response-message response) "Return the response message from the server")

        (define server '())
        (define (server-thread server) (list-ref server 1))
        (define (server-port server) (socket-port (list-ref server 2)))
        (define (server-stopped? server) (list-ref server 3))
        (define (server-stop server) (list-set! server 3 #t))
        (define (create-server thread port) (list 'server thread port #f))
        (define (start-mock-server) ; should return a server object
            (let 
                ((socket (create-socket)))
                (display "start server")
                (display socket)
                (create-server 
                    (thread (lambda () (mock-smtp-server socket)))
                    socket)))
        (define (stop-mock-server) (begin
            (server-stop server)
            (thread-wait-for-completion (server-thread server))))

        (define (mock-smtp-server socket)
            (begin
                (display "mock server start")
                (define connection '())
                (define (init) (begin 
                    (set! connection (socket-accept socket)) 
                    (socket-write connection "220 OK\r\n")))
                (define (close-sockets) (begin 
                    (socket-close connection)
                    (socket-close socket)))
                (define (handle data) (begin
                    (let
                        ((command (string-upcase (car (string-split data " "))))
                         (args (cdr (string-split data " "))))
                        (display command)
                        (display args)
                        (cond 
                            ((= command "EHLO") (ehlo (car args)))
                            (else (loop))))))
                (define (loop) (let 
                    ((data (socket-receive connection)))
                    (display "loop")
                    (if (empty? data)
                        (close-sockets)
                        (begin
                            (handle data)
                            (if (server-stopped? server)
                                (close-sockets)
                                (loop))))))
                    
                (define (ehlo answer) 
                    (socket-write 
                        connection 
                        (string-append "220 " (string-append answer "\r\n"))))

                (init)
                (loop)))

        (setup (lambda () (begin 
            (display "global setup")
            (set! server (start-mock-server)))))

        (tearDown (lambda () (begin 
            (stop-mock-server))))

        (capability 'connection 
            (list
                (test "Connect to server" (lambda () (begin 
                    (display "start test")
                    (smtp-connect "localhost" (server-port server)))))))

        (capability 'ehlo 
            (list
                (define smtp-server '())

                (setup (lambda () (begin 
                    (display "setup")
                    (set! smtp-server (smtp-connect "localhost" (server-port server)))
                    )))

                (tearDown (lambda () (begin 
                    (set! smtp-server '()))))

                (test "Basic ehlo" (lambda () (begin 
                    (display "basic ehlo")
                    (smtp-ehlo "" smtp-server))))
                    
                (test "ehlo with content" (lambda () (begin 
                    (display "content ehlo")
                    (let
                        ((ehlo-response (smtp-ehlo "ehlocontent" smtp-server)))
                        (assert-equal
                            220
                            (smtp-response-code ehlo-response))
                        (assert-equal
                            "ehlocontent"
                            (smtp-response-message ehlo-response))
                        ))))
                ))
    )
)