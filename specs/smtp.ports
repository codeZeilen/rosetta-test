(spec 
	"SMTP" "0.1"
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321")
        '("SMTP RFC 4954" "IETF" "https://tools.ietf.org/html/rfc4954"))
    
    (list 

        (placeholder '(create-socket) "Create a local network socket for the server to communicate through (it should already listen for new connections)")
        (placeholder '(socket-receive socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")
        (placeholder '(socket-port socket) "Return the port of the socket")
        (placeholder '(socket-accept socket) "Accept a new connection on the socket")
        (placeholder '(socket-close socket) "Close the socket")

        (placeholder '(smtp-connect host port) "Should connect and return some representation of the connection")
        (placeholder '(smtp-ehlo content connection) "Send an EHLO command to the server")
        (placeholder '(smtp-response-code response) "Return the response code from the server")
        (placeholder '(smtp-response-message response) "Return the response message from the server")

        (define server '())
        (define (server-thread server) (list-ref server 1))
        (define (server-port server) (socket-port (list-ref server 2)))
        (define (server-capabilities server) (list-ref server 4))
        (define (server-add-capability server capability) 
            (list-set! 
                server 
                4 
                (cons capability (server-capabilities server))))
        (define (server-stopped? server) (list-ref server 3))
        (define (server-stop server) (list-set! server 3 #t))
        (define (create-server thread port) (list 'server thread port #f '()))
        (define (start-mock-server) ; should return a server object
            (let 
                ((socket (create-socket)))
                (create-server 
                    (thread (lambda () (mock-smtp-server socket)))
                    socket)))
        (define (stop-mock-server) (begin
            (server-stop server)
            (thread-wait-for-completion (server-thread server))))

        (define (mock-smtp-server socket)
            (begin
                (define connection '())
                (define (init) (begin 
                    (set! connection (socket-accept socket)) 
                    (socket-write connection "220 OK\r\n")))
                (define (close-sockets) (begin 
                    (socket-close connection)
                    (socket-close socket)))
                (define (handle data) (begin
                    (let
                        ((command (string-upcase (car (string-split data " "))))
                         (args (string-trim (list-ref (string-split data " ") 1))))
                        (display command)
                        (display args)
                        (cond 
                            ((= command "EHLO") (ehlo args))
                            (else (loop))))))
                (define (loop) (let 
                    ((data (socket-receive connection)))
                    (if (empty? data)
                        (close-sockets)
                        (begin
                            (handle data)
                            (if (server-stopped? server)
                                (close-sockets)
                                (loop))))))
                    
                (define (ehlo answer) 
                    (define (replace-last list element) (reverse (cons element (cdr (reverse list)))))
                    (define (list-ref-last list) (car (reverse list)))
                    (let 
                        ((answers (fold-left 
                            (lambda (acc capability)
                                (append acc (list (string-append "250-" (string-append capability "\r\n")))))
                            (list (string-append "250-" (string-append answer "\r\n")))
                            (server-capabilities server))))
                        (let 
                            ((answers-text (string-join 
                                (replace-last 
                                    answers
                                    (string-replace "250-" "250 " (list-ref-last answers)))))) 
                            (socket-write 
                                connection 
                                answers-text))))

                (init)
                (loop)))

        (setup (lambda () (begin 
            (set! server (start-mock-server)))))

        (tearDown (lambda () (begin 
            (stop-mock-server))))

        (capability 'connection 
            (list
                (test "Connect to server" (lambda () (begin 
                    (smtp-connect "localhost" (server-port server)))))))

        (capability 'commands (list
            (define smtp-server '())

            (setup (lambda () (begin 
                (set! smtp-server (smtp-connect "localhost" (server-port server))))))

            (tearDown (lambda () (begin 
                (set! smtp-server '()))))

            (capability 'ehlo (list
                (test "basic ehlo" (lambda () (begin 
                    (smtp-ehlo "" smtp-server))))
                    
                (test "ehlo with identifier" (lambda () (begin 
                    (let
                        ((ehlo-response (smtp-ehlo "553.231.231.234" smtp-server)))
                        (assert-equal
                            250
                            (smtp-response-code ehlo-response))
                        (assert-equal
                            "553.231.231.234"
                            (smtp-response-message ehlo-response))
                        ))))

                (test "server answers list of capabilities" (lambda () (begin
                    (server-add-capability server "8BITMIME")
                    (let
                        ((ehlo-response (smtp-ehlo "" smtp-server)))
                        (display ehlo-response)
                        (assert-equal
                            250
                            (smtp-response-code ehlo-response))
                        (assert
                            (string-index (smtp-response-message ehlo-response) "8BITMIME"))))))
                ))

        ))
    )
)