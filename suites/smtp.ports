(suite 
	"SMTP" "0.1"
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321")
        '("SMTP RFC 4954" "IETF" "https://tools.ietf.org/html/rfc4954"))
    
    (list 

        (placeholder '(create-socket) "Create a local network socket for the server to communicate through (it should already listen for new connections)")
        (placeholder '(socket-receive socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")
        (placeholder '(socket-port socket) "Return the port of the socket")
        (placeholder '(socket-accept socket) "Accept a new connection on the socket")
        (placeholder '(socket-close socket) "Close the socket")

        (placeholder '(smtp-connect host port) "Should connect and return some representation of the connection")
        (placeholder '(smtp-disconnect connection) "")
        (placeholder '(smtp-ehlo content connection) "Send an EHLO command to the server")
        (placeholder '(smtp-mail connection from) "Send a MAIL command to the server")
        (placeholder '(smtp-rset connection) "Send a RST command to the server")
        (placeholder '(smtp-response-code response) "Return the response code from the server")
        (placeholder '(smtp-response-message response) "Return the response message from the server")
        (placeholder '(smtp-extensions connection ehlo-response) "Return a list of extensions of the server, either from the connection or the ehlo response") ; This is already an interesting case, as the extensions may be derived from only a response or may be a property of the connection object
        (placeholder '(smtp-authenticate connection method credentials) "Run authentication and return the result (in case of an exception return exception object or a stand-in for the exception)")
        (placeholder '(smtp-auth-successful? "Was the authentication successful?"))
        ; The following two are also interesting as this is an advanced feature that might be moved to a dedicated capability, but then it shares the same situation as the other unsuccessful auth tests
        (placeholder '(smtp-auth-credentials-error? "Did the authentication fail due to wrong credentials?")) 
        (placeholder '(smtp-auth-not-supported-error? "Did the authentication fail due to no compatible authentication method?"))

        (define server '())
        (define (server-thread server) (list-ref server 1))
        (define (server-port server) (socket-port (list-ref server 2)))
        (define (server-stopped? server) (list-ref server 3))
        (define (server-extensions server) (list-ref server 4))
        (define (server-response-code server) (list-ref server 5))
        (define (server-auths server) (list-ref server 6))
        (define (server-requests server) (list-ref server 7))

        (define (server-set-extensions! server new-extensions) 
            (list-set! server 4 new-extensions))
        (define (server-set-response-code! server new-code) 
            (list-set! server 5 new-code))
        (define (server-set-auths! server new-auths) 
            (list-set! server 6 new-auths))
        (define (server-set-requests! server new-requests) 
            (list-set! server 7 new-requests))
        
        (define (server-extensions-with-auth server) 
            (if (empty? (server-auths server))
                (server-extensions server)
                (append 
                    (server-extensions server)
                    (list (fold-left 
                        (lambda (acc auth-name) (string-append acc " " auth-name))
                        "AUTH"
                        (map
                            (lambda (auth) (car auth))
                            (server-auths server)))))))
        (define (server-stop server) (list-set! server 3 #t))
        (define (server-has-response-code? server) (not (= (server-response-code server) "0")))
        
        (define (create-server thread port) (list 'server thread port #f '() "0" '() '()))

        (define (start-mock-server) ; should return a server object
            (let 
                ((socket (create-socket)))
                (create-server 
                    (thread (lambda () (mock-smtp-server socket)))
                    socket)))
        (define (stop-mock-server) (begin
            (display "starting to stop mock server")
            (server-stop server)
            (display "signaled server stop")
            (thread-wait-for-completion (server-thread server))))

        (define (mock-smtp-server socket)
            (begin
                (define connection '())
                (define (init) (begin 
                    (set! connection (socket-accept socket)) 
                    (socket-write connection "220 OK\r\n")))
                (define (close-sockets) (begin 
                    (socket-close connection)
                    (socket-close socket)))
                (define (handle data) (begin
                    (let
                        ((command (string-upcase (car (string-split data " "))))
                         (args (map string-trim (cdr (string-split data " ")))))
                        (server-set-requests! 
                            server 
                            (append (server-requests server) (list data)))
                        (display (string-append "new command: " command))
                        (display args)
                        (if (server-has-response-code? server)
                            (socket-write connection (string-append (server-response-code server) "\r\n"))
                            (cond 
                                ((= command "EHLO") (ehlo (car args)))
                                ((= command "AUTH") (auth args))
                                ((= command "MAIL") (mail args))
                                (else (error "Command not found")))))))                
                (define (loop) (let 
                    ((data (socket-receive connection)))
                    (if (empty? data)
                        (close-sockets)
                        (begin
                            (handle data)
                            (display "handled data")
                            (if (server-stopped? server)
                                (close-sockets)
                                (loop))))))
                (define (mail data)
                    (if (or (empty? data) (= (list-ref (string-split (car data) ":") 1) "<invalid>"))
                        (socket-write connection "500\r\n")
                        (socket-write connection "250 2.1.0 OK\r\n")))
                (define (auth data)
                    (define (write-auth-failure-response) 
                        (socket-write connection "535 5.7.8  Authentication credentials invalid\r\n"))  ; TODO: write correct response
                    (define (write-auth-success-response) 
                        (socket-write connection "235 2.7.0 Authentication successful\r\n"))  ; TODO: write correct response
                    (let 
                        ((method (car data))
                         (credentials (if (> (length data) 1) (list-ref data 1) "")))
                        (cond 
                            ((= method "PLAIN") (begin
                                (if (= credentials "AGFjY291bnQAcGFzc3dvcmQ=")
                                    (write-auth-success-response)
                                    (write-auth-failure-response))))
                            ((= method "XOAUTH2") (begin
                                (if (= credentials "dXNlcj1hY2NvdW50AWF1dGg9QmVhcmVyIHRva2VuAQE=")
                                    (write-auth-success-response)
                                    (write-auth-failure-response))))
                            ((= method "CRAM-MD5") (begin
                                (socket-write connection "334 PDEyMzQ1Njc4OTAuMTIzNDVAc2VydmVybmFtZT4=\r\n")
                                (let 
                                    ((cram-md5-response (string-trim (socket-receive connection))))
                                    (if (= cram-md5-response "YWNjb3VudCAyYzBjMTgxZjkxOGU2ZGM5Mjg3Zjk3N2E1ODhiMzg1YQ==")
                                        (write-auth-success-response)
                                        (write-auth-failure-response)))))
                            ((= method "LOGIN") (begin
                                
                                (let 
                                    ((login-user-response
                                        (if (not (= credentials "")) 
                                            credentials
                                            (begin
                                                (socket-write connection "334 VXNlcm5hbWU6\r\n")
                                                (string-trim (socket-receive connection))))))
                                    (display login-user-response)
                                    (socket-write connection "334 UGFzc3dvcmQ6\r\n")
                                    (let 
                                        ((login-password-response (string-trim (socket-receive connection)))) 
                                        (display login-password-response)
                                        (if (and (= login-user-response "YWNjb3VudA==") (= login-password-response "cGFzc3dvcmQ="))
                                            (write-auth-success-response)
                                            (write-auth-failure-response))))))
                            (else (socket-write connection "504 5.5.2 Command not implemented\r\n")))))
                (define (ehlo answer) 
                    (define (replace-last list element) (reverse (cons element (cdr (reverse list)))))
                    (define (list-ref-last list) (car (reverse list)))
                    (let 
                        ((answers (fold-left 
                            (lambda (acc extension)
                                (append acc (list (string-append "250-" extension "\r\n"))))
                            (list (string-append "250-" answer "\r\n"))
                            (server-extensions-with-auth server))))
                        (let 
                            ((answers-text (string-join 
                                (replace-last 
                                    answers
                                    (string-replace "250-" "250 " (list-ref-last answers)))))) 
                            (socket-write 
                                connection 
                                answers-text))))

                (init)
                (loop)))

        (define (assert-response-code response code) (assert-equal code (smtp-response-code response)))
        (define (assert-extensions server response extensions) (= extensions (smtp-extensions server response)))

        (setup (lambda () (begin 
            (set! server (start-mock-server)))))

        (tearDown (lambda () (begin 
            (display "stopping mock server")
            (stop-mock-server)
            (display "stopped mock server"))))

        (capability 'connection 
            (list
                (test "Connect to server" (lambda () (begin 
                    (smtp-connect "localhost" (server-port server)))))
        ))

        (capability 'commands (list
            (define smtp-server '())
            (define (connect-smtp-server)
                (display "connecting to smtp server")
                (set! smtp-server (smtp-connect "localhost" (server-port server))))

            (tearDown (lambda () (begin 
                (set! smtp-server '()))))

            (capability 'ehlo (list
                (setup (lambda () (begin 
                    (connect-smtp-server))))

                (test "basic ehlo" (lambda () (begin 
                    (smtp-ehlo "" smtp-server))))
                    
                (test "ehlo with identifier" (lambda () (begin 
                    (let
                        ((ehlo-response (smtp-ehlo "553.231.231.234" smtp-server)))
                        (assert-equal
                            250
                            (smtp-response-code ehlo-response))
                        (assert-equal
                            "553.231.231.234"
                            (smtp-response-message ehlo-response))
                        ))))

                (test "server answers a single extension" (lambda () (begin
                    (server-set-extensions! server (list "8BITMIME"))
                    (let
                        ((ehlo-response (smtp-ehlo "" smtp-server)))
                        (assert-response-code ehlo-response 250)
                        (assert-extensions server ehlo-response (list "8BITMIME"))))))

                (test "server answers multiple extensions" (lambda () (begin
                    (server-set-extensions! server (list "8BITMIME" "VERB"))
                    (let
                        ((ehlo-response (smtp-ehlo "" smtp-server)))
                        (assert-response-code ehlo-response 250)
                        (assert-extensions server ehlo-response (list "8BITMIME" "VERB"))))))

                (test "server answers ehlo with error code" (lambda () (begin
                    (server-set-response-code! server "550 not message")
                    (let
                        ((ehlo-response (smtp-ehlo "" smtp-server)))
                        (assert-response-code ehlo-response 550)))))

                ))

            (capability 'rset (list
            
                (setup (lambda () (begin 
                    (connect-smtp-server)
                    (smtp-ehlo "" smtp-server))))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-server))))

                (test "basic rset" (lambda () (begin
                    (server-set-response-code! server "250")
                    (let
                        ((rset-response (smtp-rset smtp-server)))
                        (assert-response-code rset-response 250)))))

                ))

            (capability 'mail (list
            
                (setup (lambda () (begin 
                    (connect-smtp-server)
                    (smtp-ehlo "" smtp-server))))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-server))))

                (test "basic mail" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-server "foo@example.com")))
                        (assert-response-code mail-response 250)))))

                ; RFC 2476 - 3.2
                (test "mail with empty email address" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-server "")))
                        (assert-response-code mail-response 250)))))
                        ;(assert "MAIL FROM:<>" (last (server-requests server)))))))

                ; TODO Should be a data test
                (test "mail with invalid mail address" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-server "invalid")))
                        (assert-response-code mail-response 500)))))

                ))

            (capability 'auth (list

                (define (connect-and-ehlo-smtp-server) 
                    (connect-smtp-server)
                    (smtp-ehlo "" smtp-server))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-server))))

                (data-test "other auth failures" 
                    '(("454 4.7.0  Temporary authentication failure" #t)
                    ("534 5.7.9  Authentication mechanism is too weak" #t)
                    ("538 5.7.11  Encryption required for requested authentication mechanism" #t)
                    ("500 5.5.6  Authentication Exchange line is too long" #t)
                    ("503 5.5.1 Error: authentication not enabled" #f) )
                    (lambda (response auth-enabled) (begin 
                        (if auth-enabled (server-set-auths! server '((PLAIN ("account" "password")))))
                        (connect-and-ehlo-smtp-server)
                        (server-set-response-code! server response)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'PLAIN (list "account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)) (string-append "Expected auth failure for " response " but got " auth-result))))))
                    

                (capability 'plain-auth (list 

                    (test "plain auth success" (lambda () (begin
                        (server-set-auths! server '((PLAIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-server 'PLAIN (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "plain auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((PLAIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'PLAIN '("account" "foo"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) "Expected credentials error")))))

                    (test "plain auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'PLAIN '("account" "foo"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                    ))

                (capability 'xoauth2 (list 

                    (test "xoauth2 success" (lambda () (begin
                        (server-set-auths! server '((XOAUTH2 ("account" "token"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-server 'XOAUTH2 (list "account" "token"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "xoauth2 auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((XOAUTH2 ("account" "token"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'XOAUTH2 '("account" "not-a-token"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "xoauth2 auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'XOAUTH2 '("account" "token"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))

                (capability 'cram-md5 (list 

                    (test "cram-md5 success" (lambda () (begin
                        (server-set-auths! server '((CRAM-MD5 ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-server 'CRAM-MD5 (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "cram-md5 auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((CRAM-MD5 ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'CRAM-MD5 '("account" "not-the-password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "cram-md5 auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'CRAM-MD5 '("account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))


                (capability 'login (list 

                    (test "login success" (lambda () (begin
                        (server-set-auths! server '((LOGIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-server 'LOGIN (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "login auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((LOGIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'LOGIN '("account" "not-the-password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "login auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-server 'LOGIN '("account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))

            ))

        ))
    )
)