(suite 
	"SMTP" "0.1"
    (sources 
		'("CPython SMTP tests" "Python Foundation" "https://github.com/python/cpython/blob/9ba2a4638d7b620c939face7642b2f53a9fadc4b/Lib/test/test_smtplib.py")
        '("Ruby net-smtp tests" "MRI maintainers" "https://github.com/ruby/net-smtp/blob/master/test/net/smtp/test_smtp.rb")
        '("SMTP RFC 2821" "IETF" "https://tools.ietf.org/html/rfc2821")
        '("SMTP RFC 5321" "IETF" "https://tools.ietf.org/html/rfc5321")
        '("SMTP RFC 4954" "IETF" "https://tools.ietf.org/html/rfc4954"))
    
    (list 

        (placeholder '(create-socket) "Create a local network socket for the server to communicate through (it should already listen for new connections)")
        (placeholder '(socket-receive socket) "Read trimmed data from socket")
        (placeholder '(socket-write socket data) "Write data to socket")
        (placeholder '(socket-port socket) "Return the port of the socket")
        (placeholder '(socket-accept socket) "Accept a new connection on the socket")
        (placeholder '(socket-close socket) "Close the socket")

        (placeholder '(smtp-connect host port) "Should connect and return some representation of the connection")
        (placeholder '(smtp-disconnect connection) "")
        (placeholder '(smtp-send-message connection content from to-list) "Send a message to the server. The function should return the response from the server")
        (placeholder '(smtp-ehlo connection content) "Send an EHLO command to the server")
        (placeholder '(smtp-mail connection from) "Send a MAIL command to the server")
        (placeholder '(smtp-rcpt connection to-list options-list) "Send a RCPT command to the server. The to parameter should be a list of recipients. The function should return a list of responses from the server. Whether the RCPT commands are send by multiple invocations or a single one can be decided by the placeholder. The options list contains lists of options, one list of options per receipient. The list of options contains tuples with the option name as the first element, and the option value as the second. Clients may use the functions compile-options-strings, compile-options-string, and compile-option-string to compile the options list into key-value-strings that can be sent to the server.")
        (placeholder '(smtp-rset connection) "Send a RST command to the server")
        (placeholder '(smtp-response-code response) "Return the response code from the server")
        (placeholder '(smtp-response-message response) "Return the response message from the server")
        (placeholder '(smtp-extensions connection ehlo-response) "Return a list of extensions of the server, either from the connection or the ehlo response") ; This is already an interesting case, as the extensions may be derived from only a response or may be a property of the connection object
        (placeholder '(smtp-authenticate connection method credentials) "Run authentication and return the result (in case of an exception return exception object or a stand-in for the exception)")
        (placeholder '(smtp-auth-successful? "Was the authentication successful?"))
        ; The following two are also interesting as this is an advanced feature that might be moved to a dedicated capability, but then it shares the same situation as the other unsuccessful auth tests
        (placeholder '(smtp-auth-credentials-error? "Did the authentication fail due to wrong credentials?")) 
        (placeholder '(smtp-auth-not-supported-error? "Did the authentication fail due to no compatible authentication method?"))

        (define server '())
        (define (server-thread server) (list-ref server 1))
        (define (server-port server) (socket-port (list-ref server 2)))
        (define (server-stopped? server) (list-ref server 3))
        (define (server-extensions server) (list-ref server 4))
        (define (server-response-code server) (list-ref server 5))
        (define (server-auths server) (list-ref server 6))
        (define (server-requests server) (list-ref server 7))

        (define (server-set-extensions! server new-extensions) 
            (list-set! server 4 new-extensions))
        (define (server-set-response-code! server new-code) 
            (list-set! server 5 new-code))
        (define (server-set-auths! server new-auths) 
            (list-set! server 6 new-auths))
        (define (server-set-requests! server new-requests) 
            (list-set! server 7 new-requests))
        
        (define (server-extensions-with-auth server) 
            (if (empty? (server-auths server))
                (server-extensions server)
                (append 
                    (server-extensions server)
                    (list (fold-left 
                        (lambda (acc auth-name) (string-append acc " " auth-name))
                        "AUTH"
                        (map
                            (lambda (auth) (car auth))
                            (server-auths server)))))))
        (define (server-stop server) (list-set! server 3 #t))
        (define (server-has-response-code? server) (not (= (server-response-code server) "0")))
        
        (define (create-server thread port) (list 'server thread port #f '() "0" '() '()))

        (define (start-mock-server) ; should return a server object
            (let 
                ((socket (create-socket)))
                (create-server 
                    (thread (lambda () (mock-smtp-server socket)))
                    socket)))
        (define (stop-mock-server) (begin
            (server-stop server)
            (thread-wait-for-completion (server-thread server))))

        (define (mock-smtp-server socket)
            (begin
                (define connection '())
                (define (init) (begin 
                    (set! connection (socket-accept socket)) 
                    (socket-write connection "220 OK\r\n")))
                (define (close-sockets) (begin 
                    (socket-close connection)
                    (socket-close socket)))
                (define (handle request-string) (begin
                    ; Log the request
                    (server-set-requests! 
                        server 
                        (append (server-requests server) (list request-string)))
                    (display (string-append "-" request-string))
                    ; Handle the request
                    (let
                        ((command (string-upcase (request-command request-string)))
                         (args (request-arguments request-string)))
                        (display (string-append "args:" command))
                        (if (server-has-response-code? server)
                            (socket-write connection (string-append (server-response-code server) "\r\n"))
                            (cond 
                                ((= command "EHLO") (ehlo (car args)))
                                ((= command "AUTH") (auth args))
                                ((= command "MAIL") (mail args))
                                ((= command "RCPT") (rcpt args))
                                ((= command "DATA") (data-command args))
                                (else (error "Command not found")))))))                
                (define (loop) (let 
                    ((request-string (socket-receive connection)))
                    (if (empty? request-string)
                        (close-sockets)
                        (begin
                            (handle request-string)
                            (if (server-stopped? server)
                                (close-sockets)
                                (loop))))))
                (define (mail args)
                    (if (or (empty? args) (= (second (string-split (car args) ":")) "<invalid>"))
                        (socket-write connection "500\r\n")
                        (socket-write connection "250 2.1.0 OK\r\n")))
                (define (rcpt args)
                    (if (or (empty? args) (= (second (string-split (car args) ":")) "<invalid>")) ; TODO: will fail when options are present
                        (socket-write connection "500\r\n")
                        (socket-write connection "250 2.1.0 OK\r\n")))
                (define (data-command args)
                    (display "handling data")
                    (begin 
                        (socket-write connection "354 End data with <CR><LF>.<CR><LF>\r\n")
                        (let 
                            ((message-data (socket-receive connection))) 
                            (socket-write connection "250 2.0.0 OK\r\n"))))
                (define (auth args)
                    (define (write-auth-failure-response) 
                        (socket-write connection "535 5.7.8  Authentication credentials invalid\r\n"))  ; TODO: write correct response
                    (define (write-auth-success-response) 
                        (socket-write connection "235 2.7.0 Authentication successful\r\n"))  ; TODO: write correct response
                    (let 
                        ((method (car args))
                         (credentials (if (> (length args) 1) (second args) "")))
                        (cond 
                            ((= method "PLAIN") (begin
                                (if (= credentials "AGFjY291bnQAcGFzc3dvcmQ=")
                                    (write-auth-success-response)
                                    (write-auth-failure-response))))
                            ((= method "XOAUTH2") (begin
                                (if (= credentials "dXNlcj1hY2NvdW50AWF1dGg9QmVhcmVyIHRva2VuAQE=")
                                    (write-auth-success-response)
                                    (write-auth-failure-response))))
                            ((= method "CRAM-MD5") (begin
                                (socket-write connection "334 PDEyMzQ1Njc4OTAuMTIzNDVAc2VydmVybmFtZT4=\r\n")
                                (let 
                                    ((cram-md5-response (string-trim (socket-receive connection))))
                                    (if (= cram-md5-response "YWNjb3VudCAyYzBjMTgxZjkxOGU2ZGM5Mjg3Zjk3N2E1ODhiMzg1YQ==")
                                        (write-auth-success-response)
                                        (write-auth-failure-response)))))
                            ((= method "LOGIN") (begin
                                
                                (let 
                                    ((login-user-response
                                        (if (not (= credentials "")) 
                                            credentials
                                            (begin
                                                (socket-write connection "334 VXNlcm5hbWU6\r\n")
                                                (string-trim (socket-receive connection))))))
                                    (socket-write connection "334 UGFzc3dvcmQ6\r\n")
                                    (let 
                                        ((login-password-response (string-trim (socket-receive connection)))) 
                                        (if (and (= login-user-response "YWNjb3VudA==") (= login-password-response "cGFzc3dvcmQ="))
                                            (write-auth-success-response)
                                            (write-auth-failure-response))))))
                            (else (socket-write connection "504 5.5.2 Command not implemented\r\n")))))
                (define (ehlo answer) 
                    (define (replace-last list element) (reverse (cons element (cdr (reverse list)))))
                    (let 
                        ((answers (fold-left 
                            (lambda (acc extension)
                                (append acc (list (string-append "250-" extension "\r\n"))))
                            (list (string-append "250-" answer "\r\n"))
                            (server-extensions-with-auth server))))
                        (let 
                            ((answers-text (string-join 
                                (replace-last 
                                    answers
                                    (string-replace "250-" "250 " (last answers)))))) 
                            (socket-write 
                                connection 
                                answers-text))))

                (init)
                (loop)))

        ; Get command from a request
        (define (request-command request) (string-trim (car (string-split request " "))))

        ; Get arguments from a request
        (define (request-arguments request) (map string-trim (cdr (string-split request " "))))

        ; Compile one options tuple (KEY VALUE|VALUES) to a string
        (define (compile-option-string option)
            (string-append 
                (first option)
                "="
                (if (list? (last option)) 
                    (string-join (last option) ",") 
                    (last option)))) 

        ; Compile a list of option tuples to a list of strings
        (define (compile-options-strings options) 
            (map compile-option-string options))

        ; Compile a list of option strings to a single string that can be sent to the server
        (define (compile-options-string options) 
            (string-join (compile-options-strings options) " "))

        (define (assert-response-code response code) (assert-equal code (smtp-response-code response)))
        (define (assert-response-codes responses code) (
            for-each 
                (lambda (response) (assert-response-code response code))
                responses))

        (define (assert-extensions server response extensions) (= extensions (smtp-extensions server response)))

        ; Tests whether request 1 corresponds to request 2 (ignoring case)
        (define (request-equal? request1 request2)
            (let
                ((request1-command (string-upcase (request-command request1)))
                    (request1-arguments (request-arguments request1))
                    (request2-command (string-upcase (request-command request2)))
                    (request2-arguments (request-arguments request2)))
                (and 
                    (= request1-command request2-command)
                    (= request1-arguments request2-arguments))))

        ; Asserts whether the last request matches the given one ignoring case for the command part
        (define (assert-last-request server request) 
            (assert (request-equal? (last (server-requests server)) request)))

        (define (server-includes-request server request) 
            (not (empty? (filter 
                    (lambda (req) (request-equal? req request)) 
                    (server-requests server)))))

        (define (assert-any-request server request) 
            (assert 
                (server-includes-request server request) 
                (string-append "Expected request " request " but got " (server-requests server))))

        (setup (lambda () (begin 
            (set! server (start-mock-server)))))

        (tearDown (lambda () (begin 
            (stop-mock-server))))


        ;
        ; Capabilities
        ;

        (capability 'connection 
            (list
                (test "Connect to server" (lambda () (begin 
                    (smtp-connect "localhost" (server-port server)))))
        ))

        ; This covers full scenarios for sending a message that may be covered by convenience functions or
        ; require bridge implementors to use the commands directly
        (capability 'send-message (list
            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (smtp-connect "localhost" (server-port server))))

            (setup (lambda () (begin 
                (connect-smtp-server)
                (smtp-ehlo smtp-connection ""))))

            (tearDown (lambda () (begin 
                (smtp-disconnect smtp-connection)
                (set! smtp-connection '()))))

            (test "Send a message" (lambda () (let
                ((response (smtp-send-message smtp-connection "message content" "sender@sender.to" '("user@recipient.to"))))
                (assert-response-code response 250))))

            (test "Send a message to multiple recipients" (lambda () (let
                ((response (smtp-send-message smtp-connection "message content" "sender@sender.to" '("user1@recipient.to" "user2@recipient.to"))))
                (assert-response-code response 250))))

        ))

        (capability 'commands (list
            (define smtp-connection '())
            (define (connect-smtp-server)
                (set! smtp-connection (smtp-connect "localhost" (server-port server))))

            (tearDown (lambda () (begin 
                (smtp-disconnect smtp-connection)
                (set! smtp-connection '()))))

            (capability 'ehlo (list
                (setup (lambda () (begin 
                    (connect-smtp-server))))

                (test "basic ehlo" (lambda () (begin 
                    (smtp-ehlo smtp-connection ""))))
                    
                (test "ehlo with identifier" (lambda () (begin 
                    (let
                        ((ehlo-response (smtp-ehlo smtp-connection "553.231.231.234")))
                        (assert-equal
                            250
                            (smtp-response-code ehlo-response))
                        (assert-equal
                            "553.231.231.234"
                            (smtp-response-message ehlo-response))
                        ))))

                (test "server answers a single extension" (lambda () (begin
                    (server-set-extensions! server (list "8BITMIME"))
                    (let
                        ((ehlo-response (smtp-ehlo smtp-connection "")))
                        (assert-response-code ehlo-response 250)
                        (assert-extensions server ehlo-response (list "8BITMIME"))))))

                (test "server answers multiple extensions" (lambda () (begin
                    (server-set-extensions! server (list "8BITMIME" "VERB"))
                    (let
                        ((ehlo-response (smtp-ehlo smtp-connection "")))
                        (assert-response-code ehlo-response 250)
                        (assert-extensions server ehlo-response (list "8BITMIME" "VERB"))))))

                (test "server answers ehlo with error code" (lambda () (begin
                    (server-set-response-code! server "550 not message")
                    (let
                        ((ehlo-response (smtp-ehlo smtp-connection "")))
                        (assert-response-code ehlo-response 550)))))

                ))

            (capability 'rset (list
            
                (setup (lambda () (begin 
                    (connect-smtp-server)
                    (smtp-ehlo smtp-connection ""))))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-connection))))

                (test "basic rset" (lambda () (begin
                    (server-set-response-code! server "250")
                    (let
                        ((rset-response (smtp-rset smtp-connection)))
                        (assert-response-code rset-response 250)))))

                ))

            (capability 'mail (list
            
                (setup (lambda () (begin 
                    (connect-smtp-server)
                    (smtp-ehlo smtp-connection ""))))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-connection))))

                (test "basic mail" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-connection "foo@example.com")))
                        (assert-response-code mail-response 250)))))

                ; RFC 2476 - 3.2
                (test "mail with empty email address" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-connection "")))
                        (assert-response-code mail-response 250)
                        (assert-last-request server "MAIL FROM:<>")))))

                ; TODO Should be a data test
                (test "mail with invalid email address" (lambda () (begin 
                    (let
                        ((mail-response (smtp-mail smtp-connection "invalid")))
                        (assert-response-code mail-response 500)))))

                ))

            (capability 'rcpt (list
            
                (setup (lambda () (begin 
                    (connect-smtp-server)
                    (smtp-ehlo smtp-connection ""))))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-connection))))


                (test "basic rcpt" (lambda () (begin 
                    (let
                        ((mail-responses (smtp-rcpt smtp-connection '("user@recipient.to") '())))
                        (assert-response-codes mail-responses 250)
                        (assert-last-request server "RCPT TO:<user@recipient.to>"))))) 

                (test "rcpt with special addresses" (lambda () (begin 
                    (let
                        ((mail-responses (smtp-rcpt smtp-connection '("postmaster" "postmaster@recipient.to") '())))
                        (assert-response-codes mail-responses 250)
                        (assert-any-request server "RCPT TO:<postmaster>")
                        (assert-any-request server "RCPT TO:<postmaster@recipient.to>")))))

                (test "rcpt with multiple receivers" (lambda () (begin 
                    (let
                        ((mail-responses (smtp-rcpt smtp-connection '("user@recipient.to" "user2@recipient.to") '())))
                        (assert-response-codes mail-responses 250)
                        (assert-any-request server "RCPT TO:<user@recipient.to>")
                        (assert-any-request server "RCPT TO:<user2@recipient.to>")))))

                (test "rcpt with invalid email address" (lambda () (begin
                    (let
                        ((mail-responses (smtp-rcpt smtp-connection '("invalid") '())))
                        (assert-response-codes mail-responses 500)))))

                (test "rcpt with options - DSN" (lambda () (begin
                    (server-set-extensions! server '("DSN"))
                    (let
                        ((mail-responses (smtp-rcpt 
                            smtp-connection 
                            '("user@recipient.to" 
                              "user2@recipient.to") 
                            '((("NOTIFY" ("SUCCESS" "FAILURE"))) 
                              (("NOTIFY" "NEVER"))))))
                        (assert-response-codes mail-responses 250)
                        (assert-any-request server "RCPT TO:<user@recipient.to> NOTIFY=SUCCESS,FAILURE")
                        (assert-any-request server "RCPT TO:<user2@recipient.to> NOTIFY=NEVER")))))

                (test "rcpt with options" (lambda () (begin
                    ))) ;TODO: add more tests for options


                (capability 'rcpt-option-checking (list 
                    ; RFC 2821 - 4.1.1.3
                    ; The client MUST NOT transmit parameters other
                    ; than those associated with a service extension offered by the server
                    ; in its EHLO response.
                    ; TODO
                    (test "rcpt with invalid options" (lambda () (begin
                        )))
                    
                    ))
                

                ))

            (capability 'auth (list

                (define (connect-and-ehlo-smtp-server) 
                    (connect-smtp-server)
                    (smtp-ehlo smtp-connection ""))

                (tearDown (lambda () (begin 
                    (smtp-disconnect smtp-connection))))

                (data-test "other auth failures" 
                    '(("454 4.7.0  Temporary authentication failure" #t)
                    ("534 5.7.9  Authentication mechanism is too weak" #t)
                    ("538 5.7.11  Encryption required for requested authentication mechanism" #t)
                    ("500 5.5.6  Authentication Exchange line is too long" #t)
                    ("503 5.5.1 Error: authentication not enabled" #f) )
                    (lambda (response auth-enabled) (begin 
                        (if auth-enabled (server-set-auths! server '((PLAIN ("account" "password")))))
                        (connect-and-ehlo-smtp-server)
                        (server-set-response-code! server response)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'PLAIN (list "account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)) (string-append "Expected auth failure for " response " but got " auth-result))))))
                    

                (capability 'plain-auth (list 

                    (test "plain auth success" (lambda () (begin
                        (server-set-auths! server '((PLAIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-connection 'PLAIN (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "plain auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((PLAIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'PLAIN '("account" "foo"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) "Expected credentials error")))))

                    (test "plain auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'PLAIN '("account" "foo"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                    ))

                (capability 'xoauth2 (list 

                    (test "xoauth2 success" (lambda () (begin
                        (server-set-auths! server '((XOAUTH2 ("account" "token"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-connection 'XOAUTH2 (list "account" "token"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "xoauth2 auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((XOAUTH2 ("account" "token"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'XOAUTH2 '("account" "not-a-token"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "xoauth2 auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'XOAUTH2 '("account" "token"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))

                (capability 'cram-md5 (list 

                    (test "cram-md5 success" (lambda () (begin
                        (server-set-auths! server '((CRAM-MD5 ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-connection 'CRAM-MD5 (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "cram-md5 auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((CRAM-MD5 ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'CRAM-MD5 '("account" "not-the-password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "cram-md5 auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'CRAM-MD5 '("account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))


                (capability 'login (list 

                    (test "login success" (lambda () (begin
                        (server-set-auths! server '((LOGIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result 
                                (smtp-authenticate smtp-connection 'LOGIN (list "account" "password"))))
                            (assert (smtp-auth-successful? auth-result))))))

                    (test "login auth unsuccessful" (lambda () (begin 
                        (server-set-auths! server '((LOGIN ("account" "password"))))
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'LOGIN '("account" "not-the-password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-credentials-error? auth-result) (string-append "Expected credentials error but got " auth-result))))))

                    (test "login auth not supported" (lambda () (begin 
                        (server-set-auths! server '())
                        (connect-and-ehlo-smtp-server)
                        (let 
                            ((auth-result (smtp-authenticate smtp-connection 'LOGIN '("account" "password"))))
                            (assert (not (smtp-auth-successful? auth-result)))
                            (assert (smtp-auth-not-supported-error? auth-result))))))

                ))

            ))

        ))
    )
)